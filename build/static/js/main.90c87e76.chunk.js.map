{"version":3,"sources":["components/TodoForm.jsx","components/Task.jsx","components/TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","this","className","placeholder","onChange","React","Component","style","display","justifyContent","task","onClick","toggleComplete","onDelete","TodoList","tasks","selected","toggleAllComplete","addNewTask","newTask","map","toggleRadio","showByComplete","handleDelete","filter","handleDeleteAllComplated","type","defaultChecked","Task","length","some","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90c87e76.chunk.js","sourcesContent":["import React from \"react\";\nimport shortid from \"shortid\";\n\nexport default class TodoForm extends React.Component {\n  state = {\n    text: \"\",\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (!this.state.text) return;\n    this.props.onSubmit({\n      id: shortid.generate(),\n      text: this.state.text,\n      complete: false,\n    });\n    this.setState({\n      text: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className=\"form-control\"\n            name=\"text\"\n            value={this.state.text}\n            placeholder=\"Add new task.\"\n            onChange={this.handleChange}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default (props) => (\n  <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n    <button\n      className={\n        props.task.complete ? \"badge badge-primary\" : \"badge badge-success\"\n      }\n      onClick={props.toggleComplete}\n    >\n      <h5>{props.task.text}</h5>\n    </button>\n    &nbsp;\n    <button\n      className=\"btn btn-danger\"\n      onClick={() => props.onDelete(props.task.id)}\n    >\n      x\n    </button>\n  </div>\n);\n","import React from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport Task from \"./Task\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport default class TodoList extends React.Component {\n  state = {\n    tasks: [],\n    selected: \"all\",\n    toggleAllComplete: true,\n  };\n\n  addNewTask = (newTask) => {\n    this.setState({\n      tasks: [newTask, ...this.state.tasks],\n    });\n  };\n\n  toggleComplete = (id) => {\n    this.setState((state) => ({\n      tasks: this.state.tasks.map((task) => {\n        // update target task\n        if (task.id === id) {\n          return {\n            // copy all stuff, then change complete\n            ...task,\n            complete: !task.complete,\n          };\n        }\n        return task;\n      }),\n    }));\n  };\n\n  toggleRadio = (event) => {\n    this.setState({ selected: event.target.value }, this.showByComplete);\n  };\n\n  handleDelete = (id) => {\n    this.setState({ tasks: this.state.tasks.filter((task) => task.id !== id) });\n  };\n\n  handleDeleteAllComplated = () => {\n    this.setState({ tasks: this.state.tasks.filter((task) => !task.complete) });\n  };\n\n  toggleAllComplete = () => {\n    this.setState((state) => ({\n      tasks: this.state.tasks.map((task) => ({\n        ...task,\n        complete: this.state.toggleAllComplete,\n      })),\n      toggleAllComplete: !this.state.toggleAllComplete,\n    }));\n  };\n\n  //boÅŸ task eklenebiliyo ona bakcam\n  render() {\n    let tasks = [];\n\n    if (this.state.selected === \"all\") tasks = this.state.tasks;\n    else if (this.state.selected === \"active\")\n      tasks = this.state.tasks.filter((task) => !task.complete);\n    else tasks = this.state.tasks.filter((task) => task.complete);\n\n    return (\n      <div className=\"container\">\n        <h1>\n          <span className=\"badge badge-info\">To-Do List</span>\n        </h1>\n        <TodoForm onSubmit={this.addNewTask} />\n        <h4>\n          <div className=\"badge badge-info\">Tasks:</div>\n        </h4>\n        <div\n          className=\"input-group input-group mb-3\"\n          style={{ justifyContent: \"center\" }}\n        >\n          <div className=\"input-group-prepend\">\n            <div className=\"input-group-text\" onChange={this.toggleRadio}>\n              <input type=\"radio\" id=\"active\" name=\"complate\" value=\"active\" />\n              Active\n              <input type=\"radio\" id=\"done\" name=\"complate\" value=\"done\" />\n              Done\n              <input\n                type=\"radio\"\n                id=\"all\"\n                name=\"complate\"\n                value=\"all\"\n                defaultChecked\n              />\n              All\n            </div>\n          </div>\n        </div>\n        {tasks.map((task) => (\n          <Task\n            key={task.id}\n            task={task}\n            toggleComplete={() => this.toggleComplete(task.id)}\n            onDelete={() => this.handleDelete(task.id)}\n          />\n        ))}\n        <hr />\n        <h4>\n          <div className=\"badge badge-success\">\n            Count of active tasks:\n            {this.state.tasks.filter((task) => task.complete === false).length}\n          </div>\n        </h4>\n        <div>\n          <button className=\"btn\" onClick={this.toggleAllComplete}>\n            {this.state.toggleAllComplete ? (\n              <div className=\"btn btn-primary\">Toggle all done</div>\n            ) : (\n              <div className=\"btn btn-success\">Toggle all active</div>\n            )}\n          </button>\n        </div>\n        <div\n          style={\n            this.state.tasks.some((task) => task.complete)\n              ? { display: \"\" }\n              : { display: \"none\" }\n          }\n        >\n          <button\n            className=\"btn btn-danger\"\n            onClick={this.handleDeleteAllComplated}\n          >\n            Delete all complated tasks\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}